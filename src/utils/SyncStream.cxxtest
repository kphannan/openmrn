/** \copyright
 * Copyright (c) 2017, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file SyncStream.cxxtest
 * Unit tests for SyncStream
 *
 * @author Balazs Racz
 * @date 17 May 2017
 */

#include "utils/SyncStream.hxx"

#include "test_main.hxx"

using ::testing::StrictMock;
using ::testing::Return;
using ::testing::InSequence;
using ::testing::_;

class MockStream : public SyncStream {
public:
    MOCK_METHOD1(finalize, int(int));
    MOCK_METHOD2(write, ssize_t(const void*, size_t));
};


TEST(SyncStreamTest, WriteAll) {
    StrictMock<MockStream> stream;
    char testdata[13];

    InSequence seq;
    EXPECT_CALL(stream, write(testdata, 13)).WillOnce(Return(4));
    EXPECT_CALL(stream, write(testdata + 4, 9)).WillOnce(Return(6));
    EXPECT_CALL(stream, write(testdata + 10, 3)).WillOnce(Return(3));
    auto ret = stream.write_all(testdata, 13);
    EXPECT_EQ(13, ret);
}

TEST(SyncStreamTest, WriteAllPartial) {
    StrictMock<MockStream> stream;
    char testdata[13];

    InSequence seq;
    EXPECT_CALL(stream, write(testdata, 13)).WillOnce(Return(4));
    EXPECT_CALL(stream, write(testdata + 4, 9)).WillOnce(Return(6));
    EXPECT_CALL(stream, write(testdata + 10, 3)).WillRepeatedly(Return(0));
    auto ret = stream.write_all(testdata, 13);
    EXPECT_EQ(10, ret);

    ret = stream.write_all(testdata+10, 3);
    EXPECT_EQ(0, ret);
}

TEST(SyncStreamTest, WriteAllZero) {
    StrictMock<MockStream> stream;
    char testdata[13];

    EXPECT_CALL(stream, write(_, _)).WillRepeatedly(Return(0));
    auto ret = stream.write_all(testdata, 13);
    EXPECT_EQ(0, ret);

    ret = stream.write_all(testdata, 13);
    EXPECT_EQ(0, ret);
}

TEST(HeaderStreamTest, SingleWrite) {
    char testdata[13];
    HeaderStream str(testdata, 13);

    auto ret = str.write_all("0123456789abcdef", 17);
    EXPECT_EQ(13, ret);
    ret = str.write_all("0123456789abcdef", 17);
    EXPECT_EQ(0, ret);
    string hdr(testdata, 13);
    EXPECT_EQ("0123456789abc", hdr);
}

TEST(HeaderStreamTest, MultipleWrite) {
    char testdata[13];
    HeaderStream str(testdata, 13);

    auto ret = str.write_all("012", 3);
    EXPECT_EQ(3, ret);
    ret = str.write_all("3456", 4);
    EXPECT_EQ(4, ret);
    ret = str.write_all("789abcdefgh", 11);
    EXPECT_EQ(6, ret);
    ret = str.write_all("xxxxxxx", 7);
    EXPECT_EQ(0, ret);
    string hdr(testdata, 13);
    EXPECT_EQ("0123456789abc", hdr);
}

TEST(MaxLengthStreamTest, SingleWrite) {
    char testdata[13];
    StrictMock<MockStream>* impl = new StrictMock<MockStream>();
    MaxLengthStream str(6, impl);

    EXPECT_CALL(*impl, write(testdata, 6)).WillOnce(Return(6));
    auto ret = str.write_all(testdata, 13);
    EXPECT_EQ(6, ret);
    ret = str.write_all(testdata, 17);
    EXPECT_EQ(0, ret);
}

TEST(MaxLengthStreamTest, MultipleWrite) {
    char testdata[13];
    StrictMock<MockStream>* impl = new StrictMock<MockStream>();
    MaxLengthStream str(6, impl);

    EXPECT_CALL(*impl, write(testdata, 6)).WillOnce(Return(2));
    EXPECT_CALL(*impl, write(testdata+2, 4)).WillOnce(Return(1));
    EXPECT_CALL(*impl, write(testdata+3, 3)).WillOnce(Return(3));
    auto ret = str.write_all(testdata, 13);
    EXPECT_EQ(6, ret);
    ret = str.write_all(testdata, 17);
    EXPECT_EQ(0, ret);
}

TEST(MinWriteStreamTest, Exercise) {
    char testdata[13];
    StrictMock<MockStream>* impl = new StrictMock<MockStream>();
    MinWriteStream str(4, 'd', impl);

    auto ret = str.write(testdata, 3);
    EXPECT_EQ(3, ret);
    EXPECT_CALL(*impl, write(_, 4)).Times(2).WillRepeatedly(Return(4));
    ret = str.write_all(testdata, 5);
    EXPECT_EQ(5, ret);
    EXPECT_CALL(*impl, write(_, 4)).Times(1).WillRepeatedly(Return(4));
    ret = str.write(testdata, 4);
    EXPECT_EQ(4, ret);
    ret = str.write(testdata, 1);
    EXPECT_EQ(1, ret);
    ret = str.write(testdata, 1);
    EXPECT_EQ(1, ret);
    EXPECT_CALL(*impl, write(_, 4)).Times(1).WillRepeatedly(Return(4));
    ret = str.write_all(testdata, 3);
    EXPECT_EQ(3, ret);
    EXPECT_CALL(*impl, write(_, 4)).Times(1).WillRepeatedly(Return(4));
    ret = str.write(testdata, 3);
    EXPECT_EQ(3, ret);
    ret = str.write("abc", 3);
    EXPECT_EQ(3, ret);
    EXPECT_CALL(*impl, finalize(0));
    EXPECT_CALL(*impl, write(_, 4)).Times(1).WillRepeatedly(Return(4));
    ret = str.finalize(0);
    EXPECT_EQ(0, ret);
}

TEST(MinWriteStreamTest, ExerciseWithStringOutput) {
    std::string output;
    SyncStream* impl = new StringAppendStream(&output);

    MinWriteStream str(4, 'd', impl);

    auto ret = str.write("abc", 3);
    EXPECT_EQ(3, ret);
    ret = str.write_all("defgh", 5);
    EXPECT_EQ(5, ret);
    ret = str.write("ijkl", 4);
    EXPECT_EQ(4, ret);
    ret = str.write("m", 1);
    EXPECT_EQ(1, ret);
    ret = str.write("n", 1);
    EXPECT_EQ(1, ret);
    ret = str.write_all("opq", 3);
    EXPECT_EQ(3, ret);
    ret = str.write("rst", 3);
    EXPECT_EQ(3, ret);
    ret = str.write("abc", 3);
    EXPECT_EQ(3, ret);
    ret = str.finalize(0);
    EXPECT_EQ(0, ret);
    EXPECT_EQ("abcdefghijklmnopqrstabcd", output);
}

class TestDelegate : public DelegateStream {
public:
    TestDelegate() {
        delegate_.reset(new HeaderStream(&buf_, 4));
    }

    MOCK_METHOD1(found, void(string));

    void on_eof() override {
        found(string(buf_, 4));
        delegate_.reset(new HeaderStream(&buf_, 4));
    }

    char buf_[4];
};

TEST(DelegateTest, TestExercise) {
    StrictMock<TestDelegate> str;

    EXPECT_CALL(str, found("abcd"));
    str.write_all("abcdef", 6);
    EXPECT_CALL(str, found("efgh"));
    str.write_all("ghi", 3);
    EXPECT_CALL(str, found("ijkl"));
    EXPECT_CALL(str, found("mnop"));
    str.write_all("jklmnopqr", 9);
};
